import java.util.*;

public class ThingList {
  
    // fields
    Thing[] items;

    // Constructor
    public ThingList (int capacity) {
        items = new Thing[capacity+1];
        items[0] = new EndThing();
    }
  
    // Parameter: obj - object to add to this list
    // Postcondition: obj appended to the end of this list
    public void add (Object obj) {
        ensureCapacity();
	Thing t = new Thing(obj);
	for (int i = items.length - 1; i >= 0; i--) {
	    if (items[i] != null) {
		items[i + 1] = items[i];
	    }
	}
	items[0] = t;
    }    

    public boolean isEmpty () {
	for (int i = 1; i < items.length; i++) {
	    if (items[i] != null) {
		return false;
	    }
	}
	return true;
    }

    public int size () {
	int x = 0;
	for (int i = 0; i < items.length; i++) {
	    if (items[i] != null) {
		x++;
	    }
	}
	return x - 1;
    }

    public String toString() {
	int s = size();
	Thing[] read = new Thing [s];
	for (int i = 0; i < s; i++) {
	    read[i] = items[i];
	}
	return Arrays.toString(read);
    }

    public String remove() {
	if (isEmpty() == true) {
	    throw new IllegalStateException();
	}
	return "Yeah";
	
	    
    // WRITE REMOVE() HERE FOR THIS CHECKPOINT
    // Returns: The last item of this list after is have been removed
    // Postcondition: List has one less item. Item removed is the last one.
    // Throws: IllegalStateException if remove() is called on an empty list
    }


    // Postcondition: capacity of ThingList has doubled if there is no
    //                more room to add elements
    private void ensureCapacity() {
        if (items[items.length-1] == null)
	    return;
	Thing[] temp = new Thing[items.length*2 -1];
        for (int i =0; i < items.length; i++)
	    temp[i] = items[i];
	items = temp;
    }
    
}
